#version 450
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

struct Cell {
    vec4 position;  
    vec3 vertPosition;
    vec3 normal;
    vec4 color;     
    ivec4 states;
} cell;

layout(std430, binding = 1) readonly buffer CellSSBOIn {Cell cellIn[ ]; };
layout(std430, binding = 2) buffer CellSSBOOut {Cell cellOut[ ]; };
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(push_constant, std430) uniform pushConstant { uint64_t passedHours; };

layout (binding = 0) uniform ParameterUBO {
    vec4 lightDirection;
    ivec2 gridXY;
    float waterThreshold;
    float cellSize;
    mat4 model;
    mat4 view;
    mat4 projection;
} ubo;
ivec2 gridXY = ubo.gridXY;

uint globalID_x = gl_GlobalInvocationID.x;
uint globalID_y = gl_GlobalInvocationID.y;
uint index = globalID_y * gridXY.x + globalID_x % gridXY.x + (globalID_x / gridXY.x) * gridXY.y;

const vec4 blue       = vec4(0.0, 0.0, 1.0, 1.0);
const vec4 white      = vec4(1.0, 1.0, 1.0, 1.0);
const vec4 grey      = vec4(0.5, 0.5, 0.5, 1.0);

const int alive         =  1;
const int dead          = -1;
float sizeAlive         = ubo.cellSize;
const float sizeDead    = 0.0f;

vec4 inPos      = cellIn[index].position;
vec4 inPosOn    = vec4( inPos.xyz, sizeAlive );
vec4 inPosOff   = vec4( inPos.xyz, sizeDead );
vec3 inVertPos  = cellIn[index].vertPosition;
vec3 inNormal   = cellIn[index].normal;
vec4 inColor    = cellIn[index].color;
ivec4 inStates  = cellIn[index].states;

const int cycleSize = 24;
ivec4 setState(int _alive, int stage){ 
    int cycle = int(passedHours % cycleSize + 1); 
    return ivec4(_alive, stage, cycle, passedHours); 
}

int getNeighbourIndex(ivec2 offset) {
    ivec2 indexPos = ivec2(index % gridXY.x, index / gridXY.x);
    ivec2 neighbourPos = (indexPos + offset + gridXY) % gridXY;
    int neighbourIndex = neighbourPos.y * gridXY.x + neighbourPos.x;
    return neighbourIndex;
}

bool neighbourAlive(int index) {
    ivec2 currentState = cellIn[index].states.xy;
    bool aliveState = currentState.x == alive && currentState.y == 1;
    return aliveState;
}

int cycleNeighbours(int range) {
    int neighboursAlive = 0;
    const int numOffsets = 8;
    ivec2 directNeighbourOffsets[numOffsets] = {
        ivec2(-1, -1), ivec2(-1, 0), ivec2(-1, 1), ivec2(0, -1),
        ivec2(0, 1), ivec2(1, -1), ivec2(1, 0), ivec2(1, 1)
    };
    for (int i = 0; i < numOffsets; i++) {
        ivec2 coordOffset = directNeighbourOffsets[i];
        int neighbourIndex = getNeighbourIndex(coordOffset);
        neighboursAlive += int(neighbourAlive(neighbourIndex));
    }
    return neighboursAlive;
}

bool aliveCell          = inStates.x == alive;
bool deadCell           = inStates.x == dead;
bool stage(int number)  { return inStates.y == number; }
bool inCycleRange       = inStates.z >= 0 && inStates.z < cycleSize;
bool reachedCycleEnd    = inStates.z == cycleSize;

bool initialized        = aliveCell && inColor == blue;
bool lifeCycle          = aliveCell && inCycleRange;
bool endOfStage         = aliveCell && reachedCycleEnd;
float waterHeightOffset = 0.1;
bool underWater         = inPos.z <= (ubo.waterThreshold + waterHeightOffset);

bool live(int neighbours) { return (aliveCell && (neighbours == 3 || neighbours == 2)) || (deadCell && neighbours == 3); }
bool die(int neighbours)  { return (aliveCell && (neighbours < 2 || neighbours > 3)); }
vec4 colorIncrement     = inColor + vec4(float((passedHours % cycleSize + 1)) / float(cycleSize * 50), vec3(0.0));

void simulate(out Cell cell) {
    int neighbours  = cycleNeighbours(1);

    if (underWater) {   
       cell = Cell(inPosOff, inVertPos, inNormal, grey, setState(dead, 0) ); 
   } else if (stage(0)) {
        cell = initialized ?    Cell(inPosOn, inVertPos, inNormal, white, setState(alive, 0) ) :
               lifeCycle ?      Cell(inPosOn, inVertPos, inNormal, colorIncrement, setState(alive, 0) ) :
               endOfStage ?     Cell(inPosOn, inVertPos, inNormal, white, setState(alive, 1) ) :
                                Cell(inPosOff, inVertPos, inNormal, grey, setState(dead, 1) );
    } else if (stage(1)) {
        cell = live(neighbours) ?   Cell(inPosOn, inVertPos, inNormal, white, setState(alive, 0) ) :
               die(neighbours) ?    Cell(inPosOff, inVertPos, inNormal, grey, setState(dead, 0) ) :
                                    Cell(inPosOff, inVertPos, inNormal, inColor, setState(dead, 1) );
    }
}

void main() {  
    if (cellIn[index].states.w == passedHours) { 
        cellOut[index] = cellIn[index]; 
        return; 
    } 
    simulate(cell);
    cellOut[index] = cell;
}


/*float findCenter(float a, float b){ return (a + b) * 0.5; }

float randomFloat(int value) {
    float random = fract(sin(float(value)) * 43758.5453); // Hash function
    return random;






    float getHeight(int target){ return cellIn[target].position.z; }

vec4 sidesHeight;
vec4 cornersHeight;
void setTileEdgeHeight(){
        cornersHeight.x = getHeight( getNeighbourIndex( ivec2(0, 0)) );
        cornersHeight.y = getHeight( getNeighbourIndex( ivec2(0, 1) )); 
        cornersHeight.z = getHeight( getNeighbourIndex( ivec2(-1, 1) )); 
        cornersHeight.w = getHeight( getNeighbourIndex( ivec2(-1, 0) ));
        sidesHeight.x = getHeight( getNeighbourIndex( ivec2(1, 0)  ));    
        sidesHeight.y = getHeight( getNeighbourIndex( ivec2(0, 1)  ));
        sidesHeight.z = getHeight( getNeighbourIndex( ivec2(-1, 0) ) ); 
        sidesHeight.w = getHeight( getNeighbourIndex( ivec2(0, -1) ) );
}
}*/